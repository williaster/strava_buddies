axis.title.y    = element_text(size=title.size*1.3, face=font.face),
axis.title.x    = element_text(size=title.size*1.3, face=font.face, vjust=-0.5))
text.size  <- params$text.size
title.size <- params$title.size
font.face  <- params$font.face
colors <- c(params$colors$red, params$colors$blue)
ggplot(df.ssh1.corr, aes(x=bin.minct, y=correlation, color=secretome)) +
geom_hline() + geom_vline() +
geom_line() + geom_vline(xint=params$filt.ct) +
scale_color_manual(values = colors) +
theme_bw() +
scale_x_continuous(trans=log2_trans() ) +
coord_cartesian(c(1,110000)) +
theme(panel.grid = element_blank(),
axis.ticks      = element_line(color=params$colors$dk.grey),
axis.text       = element_text(size=text.size*1.3, face=font.face,
color=params$colors$dk.grey),
axis.title.y    = element_text(size=title.size*1.3, face=font.face),
axis.title.x    = element_text(size=title.size*1.3, face=font.face, vjust=-0.5))
ggplot(df.ssh1.corr, aes(x=bin.minct, y=correlation, color=secretome)) +
geom_hline() + geom_vline() +
geom_line() + geom_vline(xint=params$filt.ct) +
scale_color_manual(values = colors) +
theme_bw() +
scale_x_continuous(trans=log2_trans() ) +
coord_cartesian(c(1,110000)) +
xlab("Minimum counts between replicates") +
ylab("Correlation coefficient of\nenrichments of genes in bin") +
theme(panel.grid = element_blank(),
axis.ticks      = element_line(color=params$colors$dk.grey),
axis.text       = element_text(size=text.size*1.3, face=font.face,
color=params$colors$dk.grey),
axis.title.y    = element_text(size=title.size*1.3, face=font.face),
axis.title.x    = element_text(size=title.size*1.3, face=font.face, vjust=-0.5))
ggplot(df.ssh1.corr, aes(x=bin.minct, y=correlation, color=secretome)) +
geom_line() + geom_vline(xint=params$filt.ct) +
scale_color_manual(values = colors) +
theme_bw() +
scale_x_continuous(trans=log2_trans() ) +
coord_cartesian(c(1,110000)) +
xlab("Minimum counts between replicates") +
ylab("Correlation coefficient of\nenrichments of genes in bin") +
theme(panel.grid = element_blank(),
axis.ticks      = element_line(color=params$colors$dk.grey),
axis.text       = element_text(size=text.size*1.3, face=font.face,
color=params$colors$dk.grey),
axis.title.y    = element_text(size=title.size*1.3, face=font.face),
axis.title.x    = element_text(size=title.size*1.3, face=font.face, vjust=-0.5))
ggplot(df.ssh1.corr, aes(x=bin.minct, y=correlation, color=secretome)) +
geom_line() + geom_vline(xint=params$filt.ct) +
scale_color_manual(values = colors) +
theme_bw() +
scale_x_continuous(trans=log2_trans() ) +
coord_cartesian(c(1,110000)) +
xlab("Minimum counts between replicates (bins)") +
ylab("Correlation coefficient of\nenrichments of genes in bin") +
theme(panel.grid = element_blank(),
axis.ticks      = element_line(color=params$colors$dk.grey),
axis.text       = element_text(size=text.size*1.3, face=font.face,
color=params$colors$dk.grey),
axis.title.y    = element_text(size=title.size*1.3, face=font.face),
axis.title.x    = element_text(size=title.size*1.3, face=font.face, vjust=-0.5))
ggplot(df.ssh1.corr, aes(x=bin.minct, y=correlation, color=secretome)) +
geom_line() + geom_vline(xint=params$filt.ct) +
scale_color_manual(values = colors) +
theme_bw() +
scale_x_continuous(trans=log2_trans() ) +
coord_cartesian(c(1,110000)) +
xlab("Minimum counts between replicates (bins)") +
ylab("Correlation coefficient of\nenrichments of genes in bin") +
theme(panel.grid = element_blank(),
axis.ticks      = element_line(color=params$colors$dk.grey),
axis.text       = element_text(size=text.size*0.8, face=font.face,
color=params$colors$dk.grey),
axis.title.y    = element_text(size=title.size*0.8, face=font.face),
axis.title.x    = element_text(size=title.size*0.8, face=font.face, vjust=-0.5))
ggplot(df.ssh1.corr, aes(x=bin.minct, y=correlation, color=secretome)) +
geom_line() + geom_vline(xint=params$filt.ct) +
scale_color_manual(values = colors) +
theme_bw() +
scale_x_continuous(trans=log2_trans() ) +
coord_cartesian(c(1,110000)) +
xlab("Minimum counts between replicates (bins)") +
ylab("Correlation coefficient of\nenrichments of genes in bin") +
theme(panel.grid = element_blank(),
axis.ticks      = element_line(color=params$colors$dk.grey),
axis.text       = element_text(face=font.face,
color=params$colors$dk.grey),
axis.title.y    = element_text(face=font.face),
axis.title.x    = element_text(face=font.face, vjust=-0.5))
rm(list=ls())
library(ggplot2)
library(scales)
source("~/R/misc_functions.R")
source("~/Dropbox/papers/ER/figures/R/fig_global.R")
setwd("/home/cwilliams/data/misc_analysis/2014-02_count-vs-enrichment/")
f.master.data <- "/home/cwilliams/data/master_gene_enrich_and_counts/master_enrich_counts.dput"
f.genes.pex   <- "/home/cwilliams/genomes/sacCer3/geneLists/all_peroxisome.genes"
f.annotations <- "/home/cwilliams/genomes/sacCer3/comprehensive_annotation/comprehensive_annotation_table.txt"
annotations   <- read.table(f.annotations, sep="\t", header=TRUE,
colClasses=c("character", "numeric", rep("factor", 18)))
genes.pex     <- unique(read.table(f.genes.pex, as.is=TRUE)$V1)
genes.filt    <- c(subset(annotations, dubious == "yes" | overlapping.orf == "yes")$gene,
genes.pex)
filt.ct       <- 1
params        <- getglobal()
colors <- c(params$colors$red, params$colors$blue)
label.cts1    <- "cts.rep1"
label.cts2    <- "cts.rep2"
label.enrich1 <- "enrich.rep1"
label.enrich2 <- "enrich.rep2"
font.face  <- params$font.face
text.size  <- params$text.size
title.size <- params$title.size
list.master   <- dget(f.master.data)
cyto.enrich  <-   merge(subset(list.master[["cyto"]],
cyto.2mchx.total.cts > filt.ct & !gene %in% genes.filt,
select=c("gene","cyto.2mchx.log2enrich")),
subset(annotations, select=c("gene", "secretome")))
sec63.1.enrich.t <- merge(subset(list.master[["sec63"]],
s63.7mchx.total.cts > filt.ct & !gene %in% genes.filt,
select=c("gene", "s63.7mchx.total.cts", "s63.7mchx.log2enrich")),
subset(annotations, select=c("gene", "secretome")))
sec63.2.enrich.t <- merge(subset(list.master[["sec63"]],
s63.7mchx.tether.total.cts > filt.ct & !gene %in% genes.filt,
select=c("gene", "s63.7mchx.tether.total.cts", "s63.7mchx.tether.log2enrich")),
subset(annotations, select=c("gene", "secretome")))
sec63.1.enrich.v <- merge(subset(list.master[["sec63"]],
s63.7mchx.tev.cts > filt.ct & !gene %in% genes.filt,
select=c("gene", "s63.7mchx.tev.cts", "s63.7mchx.log2enrich")),
subset(annotations, select=c("gene", "secretome")))
sec63.2.enrich.v <- merge(subset(list.master[["sec63"]],
s63.7mchx.tether.tev.cts > filt.ct & !gene %in% genes.filt,
select=c("gene", "s63.7mchx.tether.tev.cts", "s63.7mchx.tether.log2enrich")),
subset(annotations, select=c("gene", "secretome")))
# SSH1
ssh1.1.enrich.t  <-  merge(subset(list.master[["ssh1"]],
ssh1.7mchx.total.cts > filt.ct & !gene %in% genes.filt,
select=c("gene", "ssh1.7mchx.total.cts", "ssh1.7mchx.log2enrich")),
subset(annotations, select=c("gene", "secretome")))
ssh1.2.enrich.t  <-  merge(subset(list.master[["ssh1"]],
ssh1.7mchx.tether.total.cts > filt.ct & !gene %in% genes.filt,
select=c("gene", "ssh1.7mchx.tether.total.cts", "ssh1.7mchx.tether.log2enrich")),
subset(annotations, select=c("gene", "secretome")))
ssh1.1.enrich.v  <-  merge(subset(list.master[["ssh1"]],
ssh1.7mchx.tev.cts > filt.ct & !gene %in% genes.filt,
select=c("gene", "ssh1.7mchx.tev.cts", "ssh1.7mchx.log2enrich")),
subset(annotations, select=c("gene", "secretome")))
ssh1.2.enrich.v  <-  merge(subset(list.master[["ssh1"]],
ssh1.7mchx.tether.tev.cts > filt.ct & !gene %in% genes.filt,
select=c("gene", "ssh1.7mchx.tether.tev.cts", "ssh1.7mchx.tether.log2enrich")),
subset(annotations, select=c("gene", "secretome")))
head(list.master[["sec63"]])
sec63.1.enrich.t <- merge(subset(list.master[["sec63"]],
s63.7mchx.total.cts > filt.ct & !gene %in% genes.filt,
select=c("gene", "s63.7mchx.total.cts", "s63.7mchx.log2enrich")),
subset(annotations, select=c("gene", "secretome")))
sec63.2.enrich.t <- merge(subset(list.master[["sec63"]],
s63.7mchx.tether.total.cts > filt.ct & !gene %in% genes.filt,
select=c("gene", "s63.7mchx.tether.total.cts", "s63.7mchx.tether.log2enrich")),
subset(annotations, select=c("gene", "secretome")))
sec63.1.enrich.v <- merge(subset(list.master[["sec63"]],
s63.7mchx.pulldown.cts > filt.ct & !gene %in% genes.filt,
select=c("gene", "s63.7mchx.pulldown.cts", "s63.7mchx.log2enrich")),
subset(annotations, select=c("gene", "secretome")))
sec63.2.enrich.v <- merge(subset(list.master[["sec63"]],
s63.7mchx.tether.pulldown.cts > filt.ct & !gene %in% genes.filt,
select=c("gene", "s63.7mchx.tether.pulldown.cts", "s63.7mchx.tether.log2enrich")),
subset(annotations, select=c("gene", "secretome")))
# SSH1
ssh1.1.enrich.t  <-  merge(subset(list.master[["ssh1"]],
ssh1.7mchx.total.cts > filt.ct & !gene %in% genes.filt,
select=c("gene", "ssh1.7mchx.total.cts", "ssh1.7mchx.log2enrich")),
subset(annotations, select=c("gene", "secretome")))
ssh1.2.enrich.t  <-  merge(subset(list.master[["ssh1"]],
ssh1.7mchx.tether.total.cts > filt.ct & !gene %in% genes.filt,
select=c("gene", "ssh1.7mchx.tether.total.cts", "ssh1.7mchx.tether.log2enrich")),
subset(annotations, select=c("gene", "secretome")))
ssh1.1.enrich.v  <-  merge(subset(list.master[["ssh1"]],
ssh1.7mchx.pulldown.cts > filt.ct & !gene %in% genes.filt,
select=c("gene", "ssh1.7mchx.pulldown.cts", "ssh1.7mchx.log2enrich")),
subset(annotations, select=c("gene", "secretome")))
ssh1.2.enrich.v  <-  merge(subset(list.master[["ssh1"]],
ssh1.7mchx.tether.pulldown.cts > filt.ct & !gene %in% genes.filt,
select=c("gene", "ssh1.7mchx.tether.pulldown.cts", "ssh1.7mchx.tether.log2enrich")),
subset(annotations, select=c("gene", "secretome")))
df.sec63.t        <- merge(sec63.1.enrich.t, sec63.2.enrich.t, by=c("gene", "secretome"))
names(df.sec63.t) <- c("gene", "secretome", label.cts1, label.enrich1, label.cts2, label.enrich2)
df.sec63.t$library <- rep("sec63-t", nrow(df.sec63.t))
df.sec63.v         <- merge(sec63.1.enrich.v, sec63.2.enrich.v, by=c("gene", "secretome"))
names(df.sec63.v)  <- c("gene", "secretome", label.cts1, label.enrich1, label.cts2, label.enrich2)
df.sec63.v$library <- rep("sec63-v", nrow(df.sec63.v))
#ssh1
df.ssh1.t        <- merge(ssh1.1.enrich.t, ssh1.2.enrich.t, by=c("gene", "secretome"))
names(df.ssh1.t) <- c("gene", "secretome", label.cts1, label.enrich1, label.cts2, label.enrich2)
df.ssh1.t$library <- rep("ssh1-t", nrow(df.ssh1.t))
df.ssh1.v        <- merge(ssh1.1.enrich.v, ssh1.2.enrich.v, by=c("gene", "secretome"))
names(df.ssh1.v) <- c("gene", "secretome", label.cts1, label.enrich1, label.cts2, label.enrich2)
df.ssh1.v$library <- rep("ssh1-v", nrow(df.ssh1.v))
df.ssh1.t      <- subset(df.ssh1.t, !is.infinite(enrich.rep1) & !is.na(enrich.rep1) &
!is.infinite(enrich.rep2) & !is.na(enrich.rep2))
df.ssh1.t.bins         <- getBins(df.ssh1.t, breaks)
df.ssh1.t.corr.secr    <- getCorrelations(subset(df.ssh1.t.bins, secretome == "yes"), breaks, "ct.bin")
df.ssh1.t.corr.secr$secretome <- rep("yes", nrow(df.ssh1.t.corr.secr))
df.ssh1.t.corr.nonsecr <- getCorrelations(subset(df.ssh1.t.bins, secretome == "no"), breaks, "ct.bin")
df.ssh1.t.corr.nonsecr$secretome <- rep("no", nrow(df.ssh1.t.corr.nonsecr))
df.ssh1.t.corr         <- rbind(df.ssh1.t.corr.secr, df.ssh1.t.corr.nonsecr)
breaks  <- 2^(0:20)
labels <- as.character(breaks)
# Function to bin genes by minimum count between replicates
getBins <- function(df.tobin, breaks) {
#if (length(breaks) != length(labels)) stop("Bins and labels must be same length!")
# ID minimum counts
min.cts <- apply(subset(df.tobin, select=c(label.cts1, label.cts2)), 1, min)
min.cts <- as.numeric(min.cts)
# Bin by bin counts
df.tobin$ct.bin <- breaks[ cut(min.cts, breaks=breaks, labels=FALSE) ]
df.tobin # return df
}
# Function to get correlations by bin
getCorrelations <- function(df.withbins, bins, name.bincol) {
df.correlations <- data.frame(bin.minct = bins)
# Closure which computes the correlation (r) value for a particular ct bin
getCorrelation <- function(ct.bin) {
df.currBin <- df.withbins[ df.withbins[[name.bincol]] == ct.bin ,]
if (nrow(df.currBin) <= 2 | is.na(ct.bin)) {
correlation <- NA
} else {
lm.currBin <- lm( paste(label.enrich1, "~", label.enrich2),
data = df.currBin, na.action = na.exclude ) # should be no NAs
correlation <- sqrt( summary(lm.currBin)$adj.r.squared )
}
correlation
}
df.correlations$correlation <- as.numeric( sapply(as.list(bins), getCorrelation ) )
df.correlations
}
df.ssh1.t      <- subset(df.ssh1.t, !is.infinite(enrich.rep1) & !is.na(enrich.rep1) &
!is.infinite(enrich.rep2) & !is.na(enrich.rep2))
df.ssh1.t.bins         <- getBins(df.ssh1.t, breaks)
df.ssh1.t.corr.secr    <- getCorrelations(subset(df.ssh1.t.bins, secretome == "yes"), breaks, "ct.bin")
df.ssh1.t.corr.secr$secretome <- rep("yes", nrow(df.ssh1.t.corr.secr))
df.ssh1.t.corr.nonsecr <- getCorrelations(subset(df.ssh1.t.bins, secretome == "no"), breaks, "ct.bin")
df.ssh1.t.corr.nonsecr$secretome <- rep("no", nrow(df.ssh1.t.corr.nonsecr))
df.ssh1.t.corr         <- rbind(df.ssh1.t.corr.secr, df.ssh1.t.corr.nonsecr)
ggplot(df.ssh1.t.corr, aes(x=bin.minct, y=correlation, color=secretome)) +
geom_line() + geom_vline(xint=params$filt.ct) +
scale_color_manual(values = colors) +
theme_bw() +
scale_x_continuous(trans=log2_trans() ) +
coord_cartesian(c(1,110000)) +
xlab("Minimum counts between replicates (bins)") +
ylab("Correlation coefficient of\nenrichments of genes in bin") +
theme(panel.grid = element_blank(),
axis.ticks      = element_line(color=params$colors$dk.grey),
axis.text       = element_text(face=font.face,
color=params$colors$dk.grey),
axis.title.y    = element_text(face=font.face),
axis.title.x    = element_text(face=font.face, vjust=-0.5))
df.ssh1.v      <- subset(df.ssh1.v, !is.infinite(enrich.rep1) & !is.na(enrich.rep1) &
!is.infinite(enrich.rep2) & !is.na(enrich.rep2))
df.ssh1.v.bins         <- getBins(df.ssh1.v, breaks)
df.ssh1.v.corr.secr    <- getCorrelations(subset(df.ssh1.v.bins, secretome == "yes"), breaks, "ct.bin")
df.ssh1.v.corr.secr$secretome <- rep("yes", nrow(df.ssh1.v.corr.secr))
df.ssh1.v.corr.nonsecr <- getCorrelations(subset(df.ssh1.v.bins, secretome == "no"), breaks, "ct.bin")
df.ssh1.v.corr.nonsecr$secretome <- rep("no", nrow(df.ssh1.v.corr.nonsecr))
df.ssh1.v.corr         <- rbind(df.ssh1.v.corr.secr, df.ssh1.v.corr.nonsecr)
ggplot(df.ssh1.v.corr, aes(x=bin.minct, y=correlation, color=secretome)) +
geom_line() + geom_vline(xint=params$filt.ct) +
scale_color_manual(values = colors) +
theme_bw() +
scale_x_continuous(trans=log2_trans() ) +
coord_cartesian(c(1,110000)) +
xlab("Minimum counts between replicates (bins)") +
ylab("Correlation coefficient of\nenrichments of genes in bin") +
theme(panel.grid = element_blank(),
axis.ticks      = element_line(color=params$colors$dk.grey),
axis.text       = element_text(face=font.face,
color=params$colors$dk.grey),
axis.title.y    = element_text(face=font.face),
axis.title.x    = element_text(face=font.face, vjust=-0.5))
ggplot(df.ssh1.v.corr, aes(x=bin.minct, y=correlation, color=secretome)) +
geom_line() + geom_vline(xint=params$filt.ct) +
scale_color_manual(values = colors) +
theme_bw() +
scale_x_continuous(trans=log2_trans() ) +
coord_cartesian(c(1,110000)) +
xlab("Minimum counts between replicates (bins)") +
ylab("Correlation coefficient of\nenrichments of genes in bin") +
ggtitle("B-heh2-ssh1 7m chx, filt on tev") +
theme(panel.grid = element_blank(),
axis.ticks      = element_line(color=params$colors$dk.grey),
axis.text       = element_text(face=font.face,
color=params$colors$dk.grey),
axis.title.y    = element_text(face=font.face),
axis.title.x    = element_text(face=font.face, vjust=-0.5))
ggplot(df.ssh1.t.corr, aes(x=bin.minct, y=correlation, color=secretome)) +
geom_line() + geom_vline(xint=params$filt.ct) +
scale_color_manual(values = colors) +
theme_bw() +
scale_x_continuous(trans=log2_trans() ) +
coord_cartesian(c(1,110000)) +
xlab("Minimum counts between replicates (bins)") +
ylab("Correlation coefficient of\nenrichments of genes in bin") +
ggtitle("B-heh2-ssh1 7m chx, filt on total") +
theme(panel.grid = element_blank(),
axis.ticks      = element_line(color=params$colors$dk.grey),
axis.text       = element_text(face=font.face,
color=params$colors$dk.grey),
axis.title.y    = element_text(face=font.face),
axis.title.x    = element_text(face=font.face, vjust=-0.5))
ggplot(df.ssh1.t.corr, aes(x=bin.minct, y=correlation, color=secretome)) +
geom_line() + geom_vline(xint=params$filt.ct) +
scale_color_manual(values = colors) +
theme_bw() +
scale_x_continuous(trans=log2_trans() ) +
coord_cartesian(c(1,110000)) +
xlab("Minimum counts between replicates (bins)") +
ylab("Correlation coefficient of\nenrichments of genes in bin") +
ggtitle("B-heh2-ssh1 7m chx, bin on total counts") +
theme(panel.grid = element_blank(),
axis.ticks      = element_line(color=params$colors$dk.grey),
axis.text       = element_text(face=font.face,
color=params$colors$dk.grey),
axis.title.y    = element_text(face=font.face),
axis.title.x    = element_text(face=font.face, vjust=-0.5))
pdf("correlation-by-ctbin_total-cts.pdf", width=7.45, height=5.71)
ggplot(df.ssh1.t.corr, aes(x=bin.minct, y=correlation, color=secretome)) +
geom_line() + geom_vline(xint=params$filt.ct) +
scale_color_manual(values = colors) +
theme_bw() +
scale_x_continuous(trans=log2_trans() ) +
coord_cartesian(c(1,110000)) +
xlab("Minimum counts between replicates (bins)") +
ylab("Correlation coefficient of\nenrichments of genes in bin") +
ggtitle("B-heh2-ssh1 7m chx, bin on total counts") +
theme(panel.grid = element_blank(),
axis.ticks      = element_line(color=params$colors$dk.grey),
axis.text       = element_text(face=font.face,
color=params$colors$dk.grey),
axis.title.y    = element_text(face=font.face),
axis.title.x    = element_text(face=font.face, vjust=-0.5))
dev.off()
pdf("correlation-by-ctbin_tev-cts.pdf", width=7.45, height=5.71)
ggplot(df.ssh1.v.corr, aes(x=bin.minct, y=correlation, color=secretome)) +
geom_line() + geom_vline(xint=params$filt.ct) +
scale_color_manual(values = colors) +
theme_bw() +
scale_x_continuous(trans=log2_trans() ) +
coord_cartesian(c(1,110000)) +
xlab("Minimum counts between replicates (bins)") +
ylab("Correlation coefficient of\nenrichments of genes in bin") +
ggtitle("B-heh2-ssh1 7m chx, bin on pulldown counts") +
theme(panel.grid = element_blank(),
axis.ticks      = element_line(color=params$colors$dk.grey),
axis.text       = element_text(face=font.face,
color=params$colors$dk.grey),
axis.title.y    = element_text(face=font.face),
axis.title.x    = element_text(face=font.face, vjust=-0.5))
dev.off()
save.image()
setwd("~/Dropbox/insight-data-science/project/strava_buddies/R/")
load(".RData")
ggplot(df.final, aes(x=n_activities, y=median, color=algorithm, fill=algorithm)) +
geom_point(alpha=0.25) +
scale_color_manual(values=c(blue, grey, orange)) +
scale_fill_manual(values=c(blue, grey, orange)) +
xlab("Number of activities considered") +
ylab("Median similarity") +
stat_summary(fun.data = "get.sd", geom="smooth") +
xlim(c(0,16)) + #ylim(c(0.2, 0.7)) +
facet_wrap(~athlete, ncol=3, scales="free_y") +
geom_vline(xint=2, linetype="dashed") +
theme(legend.position="none") +
theme_classic()
ggplot(df.final, aes(x=n_activities, y=median, color=algorithm, fill=algorithm)) +
geom_point(alpha=0.25) +
scale_color_manual(values=c(blue, grey, orange)) +
scale_fill_manual(values=c(blue, grey, orange)) +
xlab("Number of activities considered") +
ylab("Median similarity") +
stat_summary(fun.data = "get.sd", geom="smooth") +
xlim(c(0,16)) + #ylim(c(0.2, 0.7)) +
facet_wrap(~athlete, ncol=3, scales="free_y") +
geom_vline(xint=2, linetype="dashed") +
theme(legend.position="none") +
theme_grey()
ggplot(df.final, aes(x=n_activities, y=median, color=algorithm, fill=algorithm)) +
geom_point(alpha=0.25) +
scale_color_manual(values=c(blue, grey, orange)) +
scale_fill_manual(values=c(blue, grey, orange)) +
xlab("Number of activities considered") +
ylab("Median similarity") +
stat_summary(fun.data = "get.sd", geom="smooth") +
xlim(c(0,16)) + #ylim(c(0.2, 0.7)) +
facet_wrap(~athlete, ncol=3, scales="free_y") +
geom_vline(xint=2, linetype="dashed") +
theme(legend.position="none") +
theme_minimal()
ggplot(df.final, aes(x=n_activities, y=median, color=algorithm, fill=algorithm)) +
geom_point(alpha=0.25) +
scale_color_manual(values=c(blue, grey, orange)) +
scale_fill_manual(values=c(blue, grey, orange)) +
xlab("Number of activities considered") +
ylab("Median similarity") +
stat_summary(fun.data = "get.sd", geom="smooth") +
xlim(c(0,16)) + #ylim(c(0.2, 0.7)) +
facet_wrap(~athlete, ncol=3, scales="free_y") +
#geom_vline(xint=2, linetype="dashed") +
theme(legend.position="none") +
theme_minimal()
ggplot(df.final, aes(x=n_activities, y=median, color=algorithm, fill=algorithm)) +
geom_point(alpha=0.25) +
scale_color_manual(values=c(blue, grey, orange)) +
scale_fill_manual(values=c(blue, grey, orange)) +
xlab("Number of activities considered") +
ylab("Median similarity") +
stat_summary(fun.data = "get.sd", geom="smooth") +
xlim(c(0,16)) + #ylim(c(0.2, 0.7)) +
facet_wrap(~athlete, ncol=3, scales="free_y") +
#geom_vline(xint=2, linetype="dashed") +
theme(legend.position="none") +
theme_bw()
ggplot(df.final, aes(x=n_activities, y=median, color=algorithm, fill=algorithm)) +
geom_point(alpha=0.25) +
scale_color_manual(values=c(blue, grey, orange)) +
scale_fill_manual(values=c(blue, grey, orange)) +
xlab("Number of activities considered") +
ylab("Median similarity") +
stat_summary(fun.data = "get.sd", geom="smooth") +
xlim(c(0,16)) + #ylim(c(0.2, 0.7)) +
facet_wrap(~athlete, ncol=3, scales="free_y") +
#geom_vline(xint=2, linetype="dashed") +
theme(legend.position="none") +
theme_classic()
ggplot(df.final, aes(x=n_activities, y=median, color=algorithm, fill=algorithm)) +
geom_point(alpha=0.25) +
scale_color_manual(values=c(blue, grey, orange)) +
scale_fill_manual(values=c(blue, grey, orange)) +
xlab("Number of activities considered") +
ylab("Median similarity") +
stat_summary(fun.data = "get.sd", geom="smooth") +
xlim(c(0,16)) + #ylim(c(0.2, 0.7)) +
facet_wrap(~athlete, ncol=3, scales="free_y") +
#geom_vline(xint=2, linetype="dashed") +
theme(legend.position="none") +
theme_bw()
p <- ggplot(df.final, aes(x=n_activities, y=median, color=algorithm, fill=algorithm)) +
geom_point(alpha=0.25) +
scale_color_manual(values=c(blue, grey, orange)) +
scale_fill_manual(values=c(blue, grey, orange)) +
xlab("Number of activities considered") +
ylab("Median similarity") +
stat_summary(fun.data = "get.sd", geom="smooth") +
xlim(c(0,16)) + #ylim(c(0.2, 0.7)) +
facet_wrap(~athlete, ncol=3, scales="free_y") +
#geom_vline(xint=2, linetype="dashed") +
theme_bw() +
theme(legend.position="none")
p.nofriends <- ggplot(subset(df.final, algorithm %in% c("random", "stravabuddies")),
aes(x=n_activities, y=median, color=algorithm, fill=algorithm)) +
geom_point(alpha=0.25) +
scale_color_manual(values=c(grey, orange)) +
scale_fill_manual(values=c(grey, orange)) +
xlab("Number of activities considered") +
ylab("Median similarity") +
stat_summary(fun.data = "get.sd", geom="smooth") +
xlim(c(0,16)) + #ylim(c(0.2, 0.7)) +
facet_wrap(~athlete, ncol=3, scales="free_y") +
theme_bw() +
theme(legend.position="none")
pdf("median_similarity_vs_random_vs_friends_all.pdf", width=11, height=3.5, useDingbats=FALSE)
p
dev.off()
pdf("median_similarity_vs_random_all.pdf", width=11, height=3.5, useDingbats=FALSE)
p.nofriends
dev.off()
df.chris  <- get.user.df(f.c.bigbins, f.c.random.friend.sim, f.c.random.sim, "Athlete 3")
df.rob    <- get.user.df(f.r.bigbins, f.r.random.friend.sim, f.r.random.sim, "Athlete 2")
df.nicole <- get.user.df(f.n.bigbins, f.n.random.friend.sim, f.n.random.sim, "Athlete 1")
df.rob   <- subset(df.rob, median >= 0.275)
df.final <- do.call(rbind, list(df.chris, df.rob, df.nicole))
p <- ggplot(df.final, aes(x=n_activities, y=median, color=algorithm, fill=algorithm)) +
geom_point(alpha=0.25) +
scale_color_manual(values=c(blue, grey, orange)) +
scale_fill_manual(values=c(blue, grey, orange)) +
xlab("Number of activities considered") +
ylab("Median similarity") +
stat_summary(fun.data = "get.sd", geom="smooth") +
xlim(c(0,16)) + #ylim(c(0.2, 0.7)) +
facet_wrap(~athlete, ncol=3, scales="free_y") +
#geom_vline(xint=2, linetype="dashed") +
theme_bw() +
theme(legend.position="none")
p.nofriends <- ggplot(subset(df.final, algorithm %in% c("random", "stravabuddies")),
aes(x=n_activities, y=median, color=algorithm, fill=algorithm)) +
geom_point(alpha=0.25) +
scale_color_manual(values=c(grey, orange)) +
scale_fill_manual(values=c(grey, orange)) +
xlab("Number of activities considered") +
ylab("Median similarity") +
stat_summary(fun.data = "get.sd", geom="smooth") +
xlim(c(0,16)) + #ylim(c(0.2, 0.7)) +
facet_wrap(~athlete, ncol=3, scales="free_y") +
theme_bw() +
theme(legend.position="none")
pdf("median_similarity_vs_random_vs_friends_all.pdf", width=11, height=3.5, useDingbats=FALSE)
p
dev.off()
pdf("median_similarity_vs_random_all.pdf", width=11, height=3.5, useDingbats=FALSE)
p.nofriends
dev.off()
